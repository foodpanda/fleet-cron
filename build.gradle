apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

def mavenUser = hasProperty('sonatypeUsername') ? sonatypeUsername : System.getenv('SONATYPE_USER')
def mavenPass = hasProperty('sonatypePassword') ? sonatypePassword : System.getenv('SONATYPE_PASS')

group 'com.foodpanda'
version '1.0.0'

repositories {
    mavenCentral()

    maven {
        url "http://dynamodb-local.s3-website-us-west-2.amazonaws.com/release"
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'

    compile 'com.amazonaws:aws-java-sdk-dynamodb:1.11.66'
    compile 'com.google.guava:guava:19.0'
    compile 'org.apache.commons:commons-lang3:3.5'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.+'
    testCompile 'com.amazonaws:DynamoDBLocal:1.11.0.1'
}

// Thanks http://stackoverflow.com/a/39086207/942390 for help setting up Local DynamoDB
task copyNativeDeps(type: Copy) {
    from(configurations.compile + configurations.testCompile) {
        include '*.dll'
        include '*.dylib'
        include '*.so'
    }
    into 'build/libs'
}

test {
    dependsOn copyNativeDeps
    systemProperty "java.library.path", 'build/libs'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: mavenUser, password: mavenPass)
            }

            pom.project {
                name 'fleet-cron'
                packaging 'jar'
                description 'Running a Java background job only on one server of an autoscaling fleet'
                url 'https://github.com/foodpanda/fleet-cron'

                scm {
                    url 'scm:git@github.com:foodpanda/fleet-cron.git'
                    connection 'scm:git@github.com:foodpanda/fleet-cron.git'
                    developerConnection 'scm:git@github.com:foodpanda/fleet-cron.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://raw.githubusercontent.com/foodpanda/fleet-cron/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'vvondra'
                        name 'VojtÄ›ch Vondra'
                    }
                }
            }
        }
    }
}
